var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component, createContext } from 'react';
import PropTypes from 'prop-types';

var _createContext = createContext({
  updateParent: null,
  resetHeight: null
}),
    Provider = _createContext.Provider,
    Consumer = _createContext.Consumer;

var Titled = function (_Component) {
  _inherits(Titled, _Component);

  function Titled() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Titled);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Titled.__proto__ || Object.getPrototypeOf(Titled)).call.apply(_ref, [this].concat(args))), _this), _this.height = 0, _this.updateTitle = function (titles) {
      var finalTitleStr = titles.reduceRight(function (titleStr, titleFn) {
        return titleFn(titleStr);
      }, '');
      if (document && document.title !== finalTitleStr) {
        document.title = finalTitleStr;
      }
      _this.props.onChange && _this.props.onChange(finalTitleStr);
    }, _this.updateParent = function (titles) {
      var _this$props = _this.props,
          updateParent = _this$props.updateParent,
          title = _this$props.title;

      var nextTitles = titles.concat([title]);
      if (updateParent) {
        updateParent(nextTitles);
      } else if (_this.height <= nextTitles.length) {
        _this.height = nextTitles.length;
        _this.updateTitle(nextTitles);
      }
    }, _this.resetHeight = function () {
      var resetHeight = _this.props.resetHeight;

      _this.height = 0;
      resetHeight && resetHeight();
    }, _this.componentDid = function () {
      var _this$props2 = _this.props,
          updateParent = _this$props2.updateParent,
          title = _this$props2.title;

      if (updateParent) {
        updateParent([title]);
      } else if (_this.height <= 1) {
        _this.updateTitle([title]);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Titled, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.componentDid();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.componentDid();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.resetHeight();
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        Provider,
        {
          value: {
            updateParent: this.updateParent,
            resetHeight: this.resetHeight
          }
        },
        this.props.children
      );
    }
  }]);

  return Titled;
}(Component);

Titled.propTypes = {
  children: PropTypes.node,
  onChange: PropTypes.func,
  updateParent: PropTypes.func,
  resetHeight: PropTypes.func,
  title: PropTypes.func
};

var GetContext = function GetContext(props) {
  return React.createElement(
    Consumer,
    null,
    function (value) {
      return React.createElement(Titled, _extends({}, props, {
        resetHeight: value.resetHeight,
        updateParent: value.updateParent
      }));
    }
  );
};

export default GetContext;